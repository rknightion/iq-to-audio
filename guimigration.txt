================================================================================
PySide6 Migration Plan for iq-to-audio Interactive Mode
================================================================================

Project: iq-to-audio
Target: Migrate interactive.py from Tkinter/matplotlib to PySide6/Qt6
Current State: Fully functional Tk-based interactive spectrum viewer

NOTE: Detailed instructions for completed migration steps have been removed. Refer to the checklist below for status and outstanding work.

================================================================================
SECTION 13: MIGRATION EXECUTION CHECKLIST
================================================================================

Phase 1: Preparation 
----------------------------------
[x] Back up current interactive.py to interactive_tk_backup.py
[x] Update pyproject.toml dependencies
[ ] Install PySide6: uv pip install PySide6
[ ] Verify Qt backend available: python -c "from PySide6 import QtWidgets; print('OK')"
[ ] Create feature branch: git checkout -b feature/qt6-migration

Phase 2: Core Migration 
----------------------------------
[x] Replace import statements (Section 3.1)
[x] Change _InteractiveApp to inherit QMainWindow (Section 4.1)
[x] Delete _ScrollableFrame class (Section 3.3)
[x] Convert Tk variables to Python attributes (Section 4.4)
[x] Update widget type hints (Section 4.5)
[x] Rewrite _build_ui() method (Section 5)
[x] Update _configure_root_window → _configure_main_window (Section 4.3)

Phase 3: Event Handlers (1 hour)
---------------------------------
[x] Replace filedialog with QFileDialog (Section 6.2)
[x] Replace messagebox with QMessageBox (Section 6.3)
[x] Update widget state methods .configure() → .setEnabled() (Section 6.4)
[x] Update variable access .get()/.set() → .text()/.setText() (Section 6.5)
[x] Update event bindings to Qt signals (Section 6.6, 6.7)

Phase 4: Matplotlib Integration (45 minutes)
---------------------------------------------
[x] Replace FigureCanvasTkAgg with FigureCanvasQTAgg (Section 7.1)
[x] Replace NavigationToolbar2Tk with NavigationToolbar2QT (Section 7.1)
[x] Update canvas embedding in layout (Section 7.1)
[x] Migrate _WaterfallWindow to QMainWindow (Section 7.4)
[x] Add closeEvent override (Section 7.4)

Phase 5: Application Lifecycle (30 minutes)
--------------------------------------------
[x] Add QApplication initialization in launch_interactive_session (Section 8.1)
[x] Update run() method to use app.exec() (Section 8.2)
[x] Add closeEvent override to _InteractiveApp (Section 8.3)
[x] Replace self.root.quit() with QApplication.quit() (Section 8.4)

Phase 6: Threading & Signals (1 hour)
--------------------------------------
[x] Define Qt signals in _InteractiveApp (Section 9.1)
[x] Connect signals in __init__ (Section 9.1)
[x] Replace self.root.after(0, ...) with signal.emit() (Section 9.1)
[x] Update StatusProgressSink to use signals (Section 9.2)
[x] Test thread-safe UI updates

Phase 7: Testing
--------------------------
[x] Create tests/test_interactive_qt.py (Section 11.1)
[x] Write unit tests for window initialization
[x] Write unit tests for signal/slot connections
[x] Manual test: Load WAV file
[x] Manual test: Spectrum display
[x] Manual test: Span selection
[x] Manual test: Waterfall window
[x] Manual test: Preview DSP
[x] Manual test: Confirm & Run
[x] Regression test: CLI mode still works

Phase 8: Polish & Documentation 
---------------------------------------------
[x] Apply Qt stylesheets (Section 10.1, 10.2)
[x] Update README.md (Section 12.1)
[x] Update docstrings (Section 12.2)
[x] Update AGENTS.md (Section 12.3)

Phase 9: Review & Cleanup 
---------------------------------------
[ ] Review all changes against checklist
[ ] Test on macOS (primary platform per context)
[ ] Test on Linux (if available)
[ ] Test on Windows (if available)
[ ] Remove debug print statements
[ ] Run full test suite: uv run --with dev pytest
[ ] Commit changes: git commit -m "Migrate interactive mode from Tkinter to PySide6"
[ ] Create pull request with before/after screenshots


================================================================================
SECTION 16: KEY REFERENCE LINKS
================================================================================

Official Documentation:
-----------------------
- PySide6 Overview:
  https://doc.qt.io/qtforpython-6/

- PySide6 API Reference:
  https://doc.qt.io/qtforpython-6/api.html

- Qt for Python Tutorial:
  https://doc.qt.io/qtforpython-6/tutorials/index.html

- Qt Widgets Module:
  https://doc.qt.io/qt-6/qtwidgets-index.html

- Signals & Slots:
  https://doc.qt.io/qtforpython-6/overviews/signalsandslots.html

- Qt Layouts:
  https://doc.qt.io/qt-6/layout.html

Matplotlib Integration:
-----------------------
- Matplotlib Qt Backend:
  https://matplotlib.org/stable/users/explain/backends.html#qt-5-and-6

- Embedding Matplotlib in Qt:
  https://matplotlib.org/stable/gallery/user_interfaces/embedding_in_qt_sgskip.html

- FigureCanvasQTAgg Documentation:
  https://matplotlib.org/stable/api/backend_qt_api.html

Migration Guides:
-----------------
- Tkinter to Qt Migration:
  https://wiki.qt.io/Transition_from_Tkinter_to_Qt

- Qt for Python Examples:
  https://github.com/qt/pyside-examples

- Qt Stylesheets Reference:
  https://doc.qt.io/qt-6/stylesheet-reference.html

Threading:
----------
- QThread Documentation:
  https://doc.qt.io/qt-6/qthread.html

- Thread-Safe Signal/Slot:
  https://doc.qt.io/qt-6/threads-qobject.html

Testing:
--------
- pytest-qt Plugin:
  https://pytest-qt.readthedocs.io/

- Qt Test Framework:
  https://doc.qt.io/qt-6/qtest-overview.html


================================================================================
SECTION 17: COMMON PITFALLS & SOLUTIONS
================================================================================

17.1 QApplication Not Found
----------------------------
SYMPTOM: "QApplication not found" at runtime
SOLUTION: Always create QApplication before any widgets:
  qapp = QApplication.instance() or QApplication(sys.argv)

17.2 Signal Connection Timing
------------------------------
SYMPTOM: Signals don't fire
SOLUTION: Connect signals AFTER creating widgets in __init__:
  self.button = QPushButton("Click")
  self.button.clicked.connect(self.on_click)  # Connect after creation

17.3 Layout Not Visible
------------------------
SYMPTOM: Widgets don't appear
SOLUTION: Ensure layout is set and show() is called:
  widget.setLayout(layout)
  widget.show()

17.4 Thread UI Updates Crash
-----------------------------
SYMPTOM: "QObject::setProperty: Cannot set property on a different thread"
SOLUTION: Use signals to cross thread boundaries:
  # In thread: self.status_signal.emit("message")
  # In main: self.status_signal.connect(self._update_status)

17.5 Matplotlib Backend Not Found
----------------------------------
SYMPTOM: "No module named 'matplotlib.backends.backend_qtagg'"
SOLUTION: Ensure matplotlib 3.5+ installed:
  uv pip install --upgrade matplotlib

17.6 Memory Leaks with Figures
-------------------------------
SYMPTOM: Memory grows on repeated preview
SOLUTION: Explicitly close matplotlib figures:
  plt.close(self.figure)
  self.figure = None

17.7 Modal Dialog Blocks
-------------------------
SYMPTOM: QFileDialog blocks entire app
SOLUTION: Use non-modal dialogs or QFileDialog.DontUseNativeDialog:
  path, _ = QFileDialog.getOpenFileName(
      self, "Open", "", "WAV (*.wav)",
      options=QFileDialog.Option.DontUseNativeDialog
  )


================================================================================
SECTION 18: COMPATIBILITY MATRIX
================================================================================

| Component          | Tkinter Version | PySide6 Version | Notes              |
|--------------------|-----------------|-----------------|---------------------|
| Python Version     | 3.14+           | 3.14+           | No change           |
| Qt Version         | N/A             | 6.6+            | LTS recommended     |
| Matplotlib         | 3.10.7+         | 3.10.7+         | Qt backend required |
| NumPy              | 1.24+           | 1.24+           | No change           |
| SciPy              | 1.10+           | 1.10+           | No change           |
| macOS              | 10.15+          | 10.15+          | Tested platform     |
| Linux              | Any             | X11/Wayland     | Should work         |
| Windows            | 10+             | 10+             | Should work         |


================================================================================
SECTION 19: MIGRATION VALIDATION
================================================================================

Validation Checklist:
---------------------
[ ] Application launches without errors
[ ] Window renders at correct size (1150x780 initial)
[ ] File browse dialog opens and returns selection
[ ] Center frequency detection works from filename
[ ] Spectrum plot renders with correct data
[ ] Span selection works with mouse drag
[ ] Double-click zoom functions
[ ] Waterfall window opens in separate window
[ ] Demod options enable/disable correctly
[ ] Preview DSP runs without blocking UI
[ ] Stop button cancels preview
[ ] Progress updates appear in status bar
[ ] Confirm & Run completes full pipeline
[ ] Cancel button closes application cleanly
[ ] No memory leaks after 10 preview cycles
[ ] No threading errors in logs
[ ] All keyboard shortcuts work
[ ] Window resize preserves layout
[ ] HiDPI scaling looks correct
[ ] Dark mode styling applies (if system uses dark mode)


================================================================================
SECTION 20: SUCCESS CRITERIA
================================================================================

Migration is considered successful when:

Functional:
-----------
- All existing Tk features work identically in Qt
- No regression in DSP processing accuracy
- CLI mode continues to function
- Preview and Confirm & Run produce identical audio output
- Thread cancellation works reliably

Performance:
------------
- UI responsiveness equal or better than Tk version
- Spectrum rendering ≤ 2 seconds for 2-second snapshots
- Memory usage stable (< 500 MB for typical use)
- No lag during span selection drag

Quality:
--------
- Zero compiler warnings
- All tests pass
- Code follows PEP 8 and project style (AGENTS.md)
- Documentation complete and accurate

User Experience:
----------------
- Native look and feel on macOS
- Intuitive layout (no UX regressions)
- Error messages clear and helpful
- Status updates informative


================================================================================
END OF MIGRATION PLAN
================================================================================

This plan provides a concise snapshot of remaining work now that the major PySide6 migration tasks are complete. Use the checklist above to drive outstanding validation and release steps.

Generated: 2025-10-10
Author: GitHub Copilot
Project: iq-to-audio (github.com/rknightion/iq-to-audio)
