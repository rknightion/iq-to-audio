[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "iq-to-audio"
version = "0.1.0"
description = "Extract and demodulate narrowband FM audio from SDR++ baseband recordings."
readme = "README.md"
requires-python = ">=3.14"
license = {text = "MIT"}
authors = [
  { name = "IQ to Audio Tool" }
]
dependencies = [
  "numpy>=1.24",
  "scipy>=1.10",
  "soundfile>=0.12",
  "soxr>=0.3",
  "tqdm>=4.66",
  "matplotlib>=3.10.7",
  "PySide6>=6.6.0",
  "PySide6-Addons>=6.6.0",
]

[project.scripts]
iq-to-audio = "iq_to_audio.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.data-files]
"" = ["packaging/pyinstaller/iq_to_audio_pyinstaller_patch.pth"]

[dependency-groups]
dev = [
  "pytest>=7.4",
  "ruff>=0.14.0",
  "mypy>=1.13",
  "pyinstaller>=6.16.0",
  "pytest-qt>=4.4.0",
  "pytest-cov>=5.0.0",
  "pytest-benchmark>=4.0.0",
  "pytest-xvfb>=3.0.0",
  "hypothesis>=6.100.0",
  "pytest-timeout>=2.3.0",
]

[tool.ruff]
line-length = 100
target-version = "py314"

[tool.ruff.lint]
select = [
  "E",      # pycodestyle errors
  "W",      # pycodestyle warnings
  "F",      # pyflakes
  "I",      # isort
  "N",      # pep8-naming
  "UP",     # pyupgrade
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "SIM",    # flake8-simplify
  "NPY",    # numpy-specific rules
]
ignore = [
  "E501",   # line too long (handled by formatter)
  "B008",   # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "S101",   # allow assert in tests
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.mypy]
python_version = "3.14"

# Your repo uses a src/ layout — make imports resolve cleanly in editors/CI.
mypy_path = ["src"]
namespace_packages = true

# Make output readable and avoid silent config typos.
show_error_codes = true
pretty = true
color_output = true
warn_unused_configs = true

# “Sane, not strict” checks:
# - Don’t force annotations everywhere yet…
disallow_untyped_defs = false
disallow_untyped_calls = false
# - …but still type-check bodies of untyped functions to catch obvious bugs.
check_untyped_defs = true

# Common foot-gun protections that aren’t noisy.
no_implicit_optional = true
strict_equality = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true

# Third-party libs that are light on stubs — don’t let them spam you.
[[tool.mypy.overrides]]
module = [
  "PySide6.*",
  "soundfile",
  "soxr",
  "matplotlib.*",
  "scipy.*",
  "tqdm",
  "PyInstaller.*",
]
ignore_missing_imports = true

# Keep tests relaxed so you can focus typings on library code first.
[[tool.mypy.overrides]]
module = ["tests.*"]
check_untyped_defs = false
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--tb=short",
    "--cov=iq_to_audio",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=75",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gui: marks tests that require Qt GUI",
    "benchmark: marks performance benchmark tests",
]
filterwarnings = [
    "ignore::DeprecationWarning:matplotlib.*",
]

[tool.coverage.run]
source = ["src/iq_to_audio"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/visualize.py",     # Deprecated module
    "*/interactive/*",    # GUI code - hard to test in headless CI
    "*/cli.py",           # CLI entry point - mostly argparse
    "*/benchmark.py",     # Tested via benchmark suite
    "*/preview.py",       # Preview utilities - tested manually
    "*/spectrum.py",      # Spectrum/waterfall visualization
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "class .*\\(Protocol\\):",
    "@abstractmethod",
]
