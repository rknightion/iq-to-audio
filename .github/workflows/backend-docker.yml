name: Build Backend Utils Image

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-docker.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-docker.yml'
  workflow_dispatch:
    inputs:
      mbelib_branch:
        description: 'mbelib branch to build'
        required: false
        default: 'ambe_tones'
      dsdfme_branch:
        description: 'dsd-fme branch to build'
        required: false
        default: 'audio_work'
  schedule:
    # Nightly build at 2 AM UTC to catch upstream updates
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-backend

jobs:
  build-and-push:
    name: Build and Push Backend Utils Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For default branch (main)
            type=ref,event=branch
            # For pull requests
            type=ref,event=pr
            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # SHA-based tags for traceability
            type=sha,prefix={{branch}}-,format=short
            # Nightly builds
            type=raw,value=nightly,enable=${{ github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
            # Date-based tags for scheduled builds
            type=schedule,pattern={{date 'YYYYMMDD'}}

      - name: Determine build arguments
        id: build-args
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "mbelib_branch=${{ github.event.inputs.mbelib_branch }}" >> "$GITHUB_OUTPUT"
            echo "dsdfme_branch=${{ github.event.inputs.dsdfme_branch }}" >> "$GITHUB_OUTPUT"
          else
            echo "mbelib_branch=ambe_tones" >> "$GITHUB_OUTPUT"
            echo "dsdfme_branch=audio_work" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            MBELIB_BRANCH=${{ steps.build-args.outputs.mbelib_branch }}
            DSDFME_BRANCH=${{ steps.build-args.outputs.dsdfme_branch }}

      - name: Build Docker image for pull requests
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            MBELIB_BRANCH=${{ steps.build-args.outputs.mbelib_branch }}
            DSDFME_BRANCH=${{ steps.build-args.outputs.dsdfme_branch }}

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'backend-image'

      - name: Test Docker image (smoke test)
        if: github.event_name == 'pull_request'
        run: |
          echo "Testing dsd-fme binary..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }} --help

          echo "Verifying image runs as non-root..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }} sh -c 'id -u' | grep -q "1000" || (echo "Error: Not running as UID 1000" && exit 1)

          echo "All smoke tests passed!"

      - name: Test Docker image (main branch)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Testing dsd-fme binary..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --help

          echo "Verifying multiarch manifest..."
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: backend-sbom.spdx.json

      - name: Upload SBOM as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: backend-sbom-${{ github.sha }}
          path: backend-sbom.spdx.json
          retention-days: 90

      - name: Create image documentation
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cat > BACKEND_IMAGE_README.md << 'EOF'
          # Backend Utils Docker Image

          Multi-architecture Docker image containing Digital Speech Decoder: Florida Man Edition (dsd-fme) and mbelib voice codec library.

          ## Quick Start

          ```bash
          # Pull the latest image
          docker pull ghcr.io/${{ github.repository }}-backend:latest

          # Show dsd-fme help
          docker run --rm ghcr.io/${{ github.repository }}-backend:latest --help

          # Run with custom arguments
          docker run --rm -v $(pwd)/data:/data \
            ghcr.io/${{ github.repository }}-backend:latest \
            -i /data/input.bin -o /data/output.wav
          ```

          ## Available Tags

          - `latest`: Latest stable build from main branch
          - `nightly`: Nightly automated build (2 AM UTC)
          - `main`: Latest main branch build
          - `main-<sha>`: Specific commit builds
          - `YYYYMMDD`: Date-based tags from scheduled builds

          ## Supported Platforms

          - linux/amd64
          - linux/arm64

          ## Upstream Sources

          This image builds from upstream repositories:
          - mbelib: https://github.com/lwvmobile/mbelib (branch: ambe_tones)
          - dsd-fme: https://github.com/lwvmobile/dsd-fme (branch: audio_work)

          ## Security

          - Runs as non-root user (ubuntu, UID 1000)
          - Scanned with Trivy for vulnerabilities
          - SBOM available for compliance
          - Multi-stage build minimizes attack surface

          ## Build Information

          Built: ${{ github.event.repository.updated_at }}
          Commit: ${{ github.sha }}
          Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          EOF

          cat BACKEND_IMAGE_README.md

      - name: Upload image documentation
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: backend-image-docs
          path: BACKEND_IMAGE_README.md
          retention-days: 30

      - name: Summary
        if: github.event_name != 'pull_request'
        run: |
          {
            echo "### Backend Utils Image Published :rocket:"
            echo ""
            echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`"
            echo ""
            echo "**Tags:**"
            echo '```'
            echo "${{ steps.meta.outputs.tags }}"
            echo '```'
            echo ""
            echo "**Platforms:** linux/amd64, linux/arm64"
            echo ""
            echo "**Pull command:**"
            echo '```bash'
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            echo '```'
            echo ""
            echo "**Upstream branches:**"
            echo "- mbelib: \`${{ steps.build-args.outputs.mbelib_branch }}\`"
            echo "- dsd-fme: \`${{ steps.build-args.outputs.dsdfme_branch }}\`"
          } >> "$GITHUB_STEP_SUMMARY"
