name: Download Test Fixtures from Google Drive
description: Downloads iq-to-audio test fixtures using rclone from Google Drive
inputs:
  service-account-json:
    description: 'Google service account JSON credentials'
    required: true
  file-id:
    description: 'Google Drive file ID to download'
    required: true
  expected-sha256:
    description: 'Expected SHA256 checksum for validation'
    required: true
  client-id:
    description: 'Optional custom Google OAuth client ID to avoid rate limits'
    required: false
    default: ''
  client-secret:
    description: 'Optional custom Google OAuth client secret'
    required: false
    default: ''
  destination-dir:
    description: 'Destination directory for downloaded fixtures'
    required: false
    default: 'testfiles'
  cache-enabled:
    description: 'Enable caching of downloaded fixtures'
    required: false
    default: 'true'

outputs:
  cache-hit:
    description: 'Whether the cache was hit'
    value: ${{ steps.cache.outputs.cache-hit }}
  downloaded:
    description: 'Whether the file was downloaded'
    value: ${{ steps.download.outputs.downloaded }}

runs:
  using: composite
  steps:
    - name: Cache test fixtures
      id: cache
      if: inputs.cache-enabled == 'true'
      uses: actions/cache@v4
      with:
        path: ${{ inputs.destination-dir }}/iq-to-audio-fixtures.tar.xz
        key: test-fixtures-${{ inputs.expected-sha256 }}
        restore-keys: |
          test-fixtures-

    - name: Check if file exists
      id: check
      shell: bash
      run: |
        if [ -f "${{ inputs.destination-dir }}/iq-to-audio-fixtures.tar.xz" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Test fixtures already present"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Test fixtures need to be downloaded"
        fi

    - name: Install rclone
      if: steps.check.outputs.exists != 'true'
      shell: bash
      run: |
        if command -v rclone >/dev/null 2>&1; then
          echo "rclone already installed: $(rclone version | head -1)"
          exit 0
        fi

        echo "Installing rclone..."
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update && sudo apt-get install -y rclone
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install rclone
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          choco install rclone -y
        fi

        rclone version

    - name: Configure rclone for Google Drive
      if: steps.check.outputs.exists != 'true'
      shell: bash
      env:
        SERVICE_ACCOUNT_JSON: ${{ inputs.service-account-json }}
        CLIENT_ID: ${{ inputs.client-id }}
        CLIENT_SECRET: ${{ inputs.client-secret }}
      run: |
        mkdir -p ~/.config/rclone

        # Determine temp directory (cross-platform)
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TEMP_DIR="$RUNNER_TEMP"
          SERVICE_ACCOUNT_FILE="$TEMP_DIR/gdrive-service-account.json"
        else
          SERVICE_ACCOUNT_FILE="/tmp/gdrive-service-account.json"
        fi

        # Write service account JSON to temp file
        echo "$SERVICE_ACCOUNT_JSON" > "$SERVICE_ACCOUNT_FILE"

        # Build rclone config
        cat > ~/.config/rclone/rclone.conf <<EOF
        [gdrive]
        type = drive
        scope = drive.readonly
        service_account_file = $SERVICE_ACCOUNT_FILE
        EOF

        # Add custom client_id if provided to avoid rate limits
        if [ -n "$CLIENT_ID" ]; then
          echo "client_id = $CLIENT_ID" >> ~/.config/rclone/rclone.conf
          echo "client_secret = $CLIENT_SECRET" >> ~/.config/rclone/rclone.conf
          echo "Using custom OAuth client to avoid rate limits"
        else
          echo "Using rclone's default client (may be rate limited)"
        fi

        echo "rclone configuration created"
        echo "Service account file: $SERVICE_ACCOUNT_FILE"

    - name: Download fixtures from Google Drive
      id: download
      if: steps.check.outputs.exists != 'true'
      shell: bash
      run: |
        mkdir -p "${{ inputs.destination-dir }}"

        echo "Downloading test fixtures from Google Drive..."
        echo "File ID: ${{ inputs.file-id }}"

        # First, try to find the file in shared space by listing files
        echo "Searching for file in shared drive space..."
        rclone lsf --drive-shared-with-me gdrive: -R --files-only -vv || true

        # Method 1: Try to copy using the file ID directly as a file reference
        # In rclone, you can access a file by ID using the format: {file_id}
        echo "Attempting to download file by ID..."
        if rclone copyto \
          --drive-shared-with-me \
          --drive-acknowledge-abuse \
          --progress \
          --transfers 1 \
          "gdrive:{${{ inputs.file-id }}}" \
          "${{ inputs.destination-dir }}/iq-to-audio-fixtures.tar.xz" \
          -vv 2>&1 | tee /tmp/rclone.log; then
          echo "Download successful via file ID"
        else
          # Method 2: Try to find and copy by filename from shared space
          echo "Method 1 failed, trying to find file by searching shared space..."

          # List all shared files and try to find ours
          FOUND_FILE=$(rclone lsf --drive-shared-with-me gdrive: -R --files-only | grep -E "fixtures.*\.tar\.xz|iq-to-audio.*\.tar\.xz" | head -1 || true)

          if [ -n "$FOUND_FILE" ]; then
            echo "Found file: $FOUND_FILE"
            rclone copy \
              --drive-shared-with-me \
              --drive-acknowledge-abuse \
              --progress \
              --transfers 1 \
              "gdrive:$FOUND_FILE" \
              "${{ inputs.destination-dir }}/" \
              -vv

            # Rename if needed
            BASENAME=$(basename "$FOUND_FILE")
            if [ "$BASENAME" != "iq-to-audio-fixtures.tar.xz" ]; then
              mv "${{ inputs.destination-dir }}/$BASENAME" "${{ inputs.destination-dir }}/iq-to-audio-fixtures.tar.xz"
            fi
          else
            echo "ERROR: Could not find fixture file in shared space"
            echo "Available files:"
            rclone lsf --drive-shared-with-me gdrive: -R --files-only
            exit 1
          fi
        fi

        EXPECTED_FILE="${{ inputs.destination-dir }}/iq-to-audio-fixtures.tar.xz"
        if [ ! -f "$EXPECTED_FILE" ]; then
          echo "ERROR: Download failed - file not found at $EXPECTED_FILE"
          exit 1
        fi

        echo "Download complete: $EXPECTED_FILE"
        ls -lh "$EXPECTED_FILE"
        echo "downloaded=true" >> $GITHUB_OUTPUT

    - name: Verify checksum
      if: steps.check.outputs.exists != 'true'
      shell: bash
      run: |
        FILE="${{ inputs.destination-dir }}/iq-to-audio-fixtures.tar.xz"
        EXPECTED="${{ inputs.expected-sha256 }}"

        echo "Verifying SHA256 checksum..."
        echo "Expected: $EXPECTED"

        if [[ "$RUNNER_OS" == "macOS" ]]; then
          ACTUAL=$(shasum -a 256 "$FILE" | awk '{print $1}')
        else
          ACTUAL=$(sha256sum "$FILE" | awk '{print $1}')
        fi

        echo "Actual:   $ACTUAL"

        if [ "$ACTUAL" != "$EXPECTED" ]; then
          echo "ERROR: Checksum mismatch!"
          echo "Expected: $EXPECTED"
          echo "Got:      $ACTUAL"
          exit 1
        fi

        echo "Checksum verified successfully"

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        # Remove sensitive files (cross-platform)
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          rm -f "$RUNNER_TEMP/gdrive-service-account.json" || true
        else
          rm -f /tmp/gdrive-service-account.json || true
        fi
        rm -f ~/.config/rclone/rclone.conf || true
